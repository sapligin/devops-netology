---
- name: Installing Mysql and dependencies
  apt:
    name: "{{ item }}"
    state: present
    update_cache: yes
  loop:
    - mysql-server
    - mysql-client
    - python3-mysqldb
    - libmysqlclient-dev
  become: true
- name: start and enable mysql service
  service:
    name: mysql
    state: started
    enabled: yes


- name: Create .my.cnf
  become: true
  template:
    src: "templates/.my.cnf.j2"
    dest: "/root/.my.cnf"
    owner: root
    group: root
    mode: 0600

- name: creating db
  become: true
  mysql_db:
    name: "{{ db_name }}"
    state: present

- name: creating mysql user
  become: true
  mysql_user:
    name: "{{ db_user }}"
    password: "{{ db_pass }}"
    priv: "{{ db_name }}.*:ALL"
    host: '%'
    state: present

- name: Enable remote login to mysql
  become: true
  lineinfile:
    path: /etc/mysql/mysql.conf.d/mysqld.cnf
    regexp: '^bind-address'
    line: 'bind-address = 0.0.0.0'
    backup: yes

- name: Restart mysql
  become: true
  service:
    name: mysql
    state: restarted

- name: Replace master.cnf
  become: true
  template:
    src: "templates/{{ inventory_hostname }}.cnf.j2"
    dest: /etc/mysql/mysql.conf.d/mysqld.cnf
  when:
    - mysql_replication_role == 'master'
    - mysql_replication_user is defined
    - (mysql_replication_master | length) > 0

- name: Restart mysql
  become: true
  service:
    name: mysql
    state: restarted
  when:
    - mysql_replication_role == 'master'

- name: Replace slave.cnf
  become: true
  template:
    src: "templates/{{ inventory_hostname }}.cnf.j2"
    dest: /etc/mysql/mysql.conf.d/mysqld.cnf
  when:
    - mysql_replication_role == 'slave'
    - (mysql_replication_master | length) > 0

- name: Restart mysql
  become: true
  service:
    name: mysql
    state: restarted
  when:
    - mysql_replication_role == 'slave'

- name: Ensure replication user exists on master.
  become: true
  mysql_user:
    name: "{{ mysql_replication_user }}"
    host: "%"
    password: "{{ mysql_replication_user_password }}"
    priv: "*.*:REPLICATION SLAVE,REPLICATION CLIENT"
    state: present
  when: inventory_hostname == 'mysql-master'

- name: Change the authentication plugin of MySQL root user to mysql_native_password
  become: true
  shell: mysql -e 'UPDATE mysql.user SET plugin="mysql_native_password"
    WHERE user="{{ mysql_replication_user }}" AND host="%"'
  when: inventory_hostname == 'mysql-master'
- name: Flush Privileges
  become: true
  shell: mysql -e 'FLUSH PRIVILEGES'
  when: inventory_hostname == 'mysql-master'

- name: Restart mysql
  become: true
  service:
    name: mysql
    state: restarted
  when:
    - mysql_replication_role == 'master'


- name: Check slave replication status.
  become: true
  mysql_replication:
    mode: getslave
  ignore_errors: true
  register: slave
  when: inventory_hostname == 'mysql-slave'

- name: Check master replication status.
  become: true
  mysql_replication:
    mode: getmaster
  delegate_to: "{{ mysql_replication_master }}"
  register: master
  when: inventory_hostname == 'mysql-slave'


- name: Configure replication on the slave.
  become: true
  mysql_replication:
    mode: changemaster
    master_host: "{{ hostvars['mysql-master'].ansible_host }}"
    master_user: "{{ mysql_replication_user }}"
    master_password: "{{ mysql_replication_user_password }}"
    master_log_file: "{{ master.File }}"
    master_log_pos: "{{ master.Position }}"
  ignore_errors: true
  when: inventory_hostname == 'mysql-slave'


- name: Start replication.
  mysql_replication: mode=startslave
  when: inventory_hostname == 'mysql-slave'
  become: true
